package mb

import zio.{ZIO, ZIOAppDefault}

object ListCutTreesToLogs extends ZIOAppDefault:

  enum TypedTree:
    case ğŸŒ³
    case ğŸŒ´
    case ğŸŒ²

  enum Log:
    case `ğŸªµ`
  override def run =
    import Log.*
    import TypedTree.*

    val trees: List[TypedTree] = List(ğŸŒ³, ğŸŒ´, ğŸŒ²)
    val `ğŸªš` : TypedTree => List[Log] = {
      case ğŸŒ³ => List(ğŸªµ, ğŸªµ)
      case ğŸŒ´ => List()
      case ğŸŒ² => List(ğŸªµ, ğŸªµ, ğŸªµ)
    }

    val logs = trees.flatMap(`ğŸªš`)

    ZIO.debug(logs.mkString(""))
