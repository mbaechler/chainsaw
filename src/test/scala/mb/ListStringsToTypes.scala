package mb

import zio.{ZIO, ZIOAppDefault}

object ListStringsToTypes extends ZIOAppDefault:

  enum TypedTree:
    case ğŸŒ³
    case ğŸŒ´
    case ğŸŒ²
  override def run =
    val strings: List[String] = List("ğŸŒ³", "ğŸŒ´", "ğŸŒ²")
    val `ğŸª„` : String => TypedTree = {
      case "ğŸŒ³" => TypedTree.ğŸŒ³
      case "ğŸŒ´" => TypedTree.ğŸŒ´
      case "ğŸŒ²" => TypedTree.ğŸŒ²
    }

    val logs = strings.map(`ğŸª„`)

    given showTree: Show[TypedTree] = {
      case TypedTree.ğŸŒ³ => "ğŸŒ³"
      case TypedTree.ğŸŒ´ => "ğŸŒ´"
      case TypedTree.ğŸŒ² => "ğŸŒ²"
    }

    ZIO.debug(logs)
